# View confusion matrix and other performance metrics
conf_matrix <- confusionMatrix(predictions, df1$Gender)
install.packages('caret')
install.packages("rpart.plot")
data <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutMissingValues.csv")
head(data)
# View confusion matrix and other performance metrics
conf_matrix <- confusionMatrix(predictions, df1$Gender)
install.packages('caret')
install.packages("rpart.plot")
library(caret)
data <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutMissingValues.csv")
head(data)
df1 = subset(data, select = -c(IndividualID) )
cols_to_encode <- c("Species", "Island")
# Perform one-hot encoding
one_hot_encoded <- model.matrix(~.-1 + ., data = df1[, cols_to_encode])
# Combine the one-hot-encoded matrix with the original dataframe
df1 <- cbind(df1, one_hot_encoded)
# Remove the original categorical columns
df1 <- df1[, !names(df1) %in% cols_to_encode]
library(caret)
ctrl<- trainControl(method  = "cv", number  = 10, savePredictions = TRUE)
model <- train(Gender ~ ., data = df1, method = "rpart", trControl = ctrl)
# Using names() function
variable_names <- names(df1)
print(variable_names)
# Summarize the model
print(model)
library(rpart.plot)
rpart.plot(model$finalModel)
df1$Gender <- factor(df1$Gender)
conf_matrix <- confusionMatrix(predict(model, newdata = df1), df1$Gender)
print(conf_matrix)
data2 <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutGender.csv")
cols_to_encode <- c("Species", "Island")
df1 = subset(data2, select = -c(IndividualID) )
# Perform one-hot encoding
one_hot_encoded <- model.matrix(~.-1 + ., data = df1[, cols_to_encode])
# Combine the one-hot-encoded matrix with the original dataframe
df1 <- cbind(df1, one_hot_encoded)
# Remove the original categorical columns
df1 <- df1[, !names(df1) %in% cols_to_encode]
head(df1)
# Use the trained model to make predictions on the new data
predictions <- predict(model, newdata = df1)
# View confusion matrix and other performance metrics
conf_matrix <- confusionMatrix(predictions, df1$Gender)
df1 = subset(data2, select = -c(Gender) )
combined_df <- cbind(df1, predictions)
data2 <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutGender.csv")
cols_to_encode <- c("Species", "Island")
df1 = subset(data2, select = -c(IndividualID) )
# Perform one-hot encoding
one_hot_encoded <- model.matrix(~.-1 + ., data = df1[, cols_to_encode])
# Combine the one-hot-encoded matrix with the original dataframe
df1 <- cbind(df1, one_hot_encoded)
# Remove the original categorical columns
df1 <- df1[, !names(df1) %in% cols_to_encode]
head(df1)
# Use the trained model to make predictions on the new data
predictions <- predict(model, newdata = df1)
# View confusion matrix and other performance metrics
conf_matrix <- confusionMatrix(predictions, df1$Gender)
# Use the trained model to make predictions on the new data
predictions <- predict(model, newdata = df1)
install.packages('caret')
install.packages("rpart.plot")
library(caret)
data <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutMissingValues.csv")
head(data)
df1 = subset(data, select = -c(IndividualID) )
cols_to_encode <- c("Species", "Island")
# Perform one-hot encoding
one_hot_encoded <- model.matrix(~.-1 + ., data = df1[, cols_to_encode])
# Combine the one-hot-encoded matrix with the original dataframe
df1 <- cbind(df1, one_hot_encoded)
# Remove the original categorical columns
df1 <- df1[, !names(df1) %in% cols_to_encode]
library(caret)
ctrl<- trainControl(method  = "cv", number  = 10, savePredictions = TRUE)
model <- train(Gender ~ ., data = df1, method = "rpart", trControl = ctrl)
# Using names() function
variable_names <- names(df1)
print(variable_names)
# Summarize the model
print(model)
library(rpart.plot)
rpart.plot(model$finalModel)
df1$Gender <- factor(df1$Gender)
conf_matrix <- confusionMatrix(predict(model, newdata = df1), df1$Gender)
print(conf_matrix)
data2 <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutGender.csv")
cols_to_encode <- c("Species", "Island")
df1 = subset(data2, select = -c(IndividualID) )
# Perform one-hot encoding
one_hot_encoded <- model.matrix(~.-1 + ., data = df1[, cols_to_encode])
# Combine the one-hot-encoded matrix with the original dataframe
df1 <- cbind(df1, one_hot_encoded)
# Remove the original categorical columns
df1 <- df1[, !names(df1) %in% cols_to_encode]
head(df1)
# Use the trained model to make predictions on the new data
predictions <- predict(model, newdata = df1)
install.packages("caret")
install.packages("rpart.plot")
# Using names() function
variable_names <- names(df1)
print(variable_names)
# Use the trained model to make predictions on the new data
predictions <- predict(model, newdata = df1)
data2 <- read.csv2("E:\\AppDS Semester 1\\IML assignment\\Decision Tree Modelling using pengiun dataset\\PenguinsWithoutGender.csv")
cols_to_encode <- c("Species", "Island")
df1 = subset(data2, select = -c(IndividualID) )
# Perform one-hot encoding
one_hot_encoded <- model.matrix(~.-1 + ., data = df1[, cols_to_encode])
# Combine the one-hot-encoded matrix with the original dataframe
df1 <- cbind(df1, one_hot_encoded)
# Remove the original categorical columns
df1 <- df1[, !names(df1) %in% cols_to_encode]
head(df1)
# Using names() function
variable_names <- names(df1)
print(variable_names)
# Use the trained model to make predictions on the new data
predictions <- predict(model, newdata = df1)
